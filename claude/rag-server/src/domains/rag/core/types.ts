/**
 * RAG Core Types - Unified Type Definitions
 * All RAG-related types and interfaces consolidated in one place
 */

// ========================================
// Basic Data Types
// ========================================

/**
 * File metadata interface (used by FileWatcher and extractFileMetadata)
 */
export interface FileMetadata {
  id: string
  name: string
  path: string
  size: number
  fileType: string
  createdAt: string // ISO string
  modifiedAt: string // ISO string
  hash: string
}

/**
 * Document metadata stored in VectorDB (unified metadata type)
 */
export interface DocumentMetadata {
  // File basic info
  fileName: string
  filePath: string
  fileType: string
  fileSize: number
  fileHash: string

  // Timestamps
  createdAt: string // ISO string
  modifiedAt: string // ISO string
  processedAt: string // ISO string

  // Optional extended fields
  tags?: string[]
  category?: string
  language?: string

  // User-defined fields (extensible)
  [key: string]: any
}

/**
 * Document chunk interface (simplified)
 */
export interface DocumentChunk {
  id: string
  fileId: string
  chunkIndex: number
  content: string
  embeddingId?: string
  metadata?: DocumentMetadata
}

// ========================================
// Vector Store Types
// ========================================

/**
 * Vector document - common document format used by all providers
 */
export interface VectorDocument {
  // Unique identifiers
  id: string // chunk-level unique ID
  doc_id: string // document (file) level ID
  chunk_id: number // chunk index

  // Content
  content: string // actual text content
  vector?: number[] // embedding vector (optional, generated by provider)

  // Metadata
  metadata: DocumentMetadata
  modelName?: string // embedding model name (optional)
}

/**
 * Vector search result - common search result format returned by all providers
 */
export interface VectorSearchResult {
  // Document info
  id: string // chunk-level unique ID
  content: string // text content

  // Search scores
  score: number // similarity score (0-1, higher is more similar)

  // Metadata
  metadata: DocumentMetadata
  chunkIndex: number // chunk index (compatibility)
}

/**
 * Vector search options - provider-independent common search options (simplified)
 */
export interface VectorSearchOptions {
  topK?: number // maximum number of results
  scoreThreshold?: number // minimum score threshold
}

/**
 * Index statistics
 */
export interface IndexStats {
  totalVectors: number // total vector count
  dimensions: number // vector dimensions
  indexSize?: number // index size (bytes)
  embeddingModel?: string // embedding model name
  rerankingModel?: string // reranking model name
}

// ========================================
// LanceDB Types (formerly in separate files)
// ========================================

/**
 * RAG-optimized simple document schema for LanceDB
 * GPT recommended approach: vector, text, doc_id, chunk_id, metadata (JSON string)
 */
export interface RAGDocumentRecord extends Record<string, unknown> {
  vector: number[] // embedding vector
  text: string // original text to pass to LLM (chunk content)
  doc_id: string // document identifier (file path based)
  chunk_id: number // chunk index
  metadata: string // metadata stored as JSON string
  model_name: string // embedding model name
}

/**
 * LanceDB search result (simplified)
 */
export interface RAGSearchResult {
  vector: number[]
  text: string
  doc_id: string
  chunk_id: number
  metadata: DocumentMetadata
  _distance?: number // distance value provided by LanceDB
  score?: number // calculated similarity score
}

/**
 * LanceDB table creation options (simplified)
 */
export interface LanceDBTableOptions {
  tableName: string
  mode?: 'create' | 'overwrite' | 'append'
  embeddingFunction?: any // LanceDBEmbeddingFunction
}

/**
 * Search filter options (simplified)
 */
export interface SearchFilters {
  fileTypes?: string[]
  docIds?: string[]
  tags?: string[]
  dateRange?: {
    start: string
    end: string
  }
}

// ========================================
// Search Types (consolidated from multiple files)
// ========================================

export interface SearchOptions {
  topK?: number
  fileTypes?: string[]
  metadataFilters?: Record<string, string>
  scoreThreshold?: number
  enableReranking?: boolean
}

export interface SearchResult {
  content: string
  score: number
  metadata: Record<string, any>
  chunkIndex: number

  // Reranking information
  rerankingScore?: number // Only present if reranking was used
  vectorScore?: number // Vector search score (when reranking is used)
}

// ========================================
// Reranking Types
// ========================================

/**
 * Reranking options for fine-tuning the reranking process
 */
export interface RerankingOptions {
  topK?: number // maximum number of results after reranking
  model?: string // reranking model to use
}

/**
 * Input for reranking process
 */
export interface RerankingInput {
  query: string
  documents: VectorSearchResult[]
}

/**
 * Result after reranking process
 */
export interface RerankingResult {
  // Document info (same as VectorSearchResult)
  id: string
  content: string
  metadata: DocumentMetadata
  chunkIndex: number

  // Reranking scores
  vectorScore: number // vector search score
  rerankScore: number // reranking model score
  score: number // final combined/normalized score
}

// ========================================
// Model Information Types
// ========================================

export interface ModelInfo {
  name: string
  service: string
  dimensions: number
  model?: string
}

// ========================================
// Event Types
// ========================================

// ========================================
// Constants
// ========================================
