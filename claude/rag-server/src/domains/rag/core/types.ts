/**
 * RAG Core Types - Unified Type Definitions
 * All RAG-related types and interfaces consolidated in one place
 */

// ========================================
// Basic Data Types
// ========================================

/**
 * File metadata interface (used by FileWatcher and extractFileMetadata)
 */
export interface FileMetadata {
  id: string
  name: string
  path: string
  size: number
  fileType: string
  createdAt: string // ISO string
  modifiedAt: string // ISO string
  hash: string
}

/**
 * Document metadata stored in VectorDB (unified metadata type)
 */
export interface DocumentMetadata {
  // File basic info
  fileName: string
  filePath: string
  fileType: string
  fileSize: number
  fileHash: string

  // Timestamps
  createdAt: string // ISO string
  modifiedAt: string // ISO string
  processedAt: string // ISO string

  // Optional extended fields
  tags?: string[]
  category?: string
  language?: string

  // User-defined fields (extensible)
  [key: string]: any
}


// ========================================
// Vector Store Types
// ========================================

/**
 * Vector document - common document format used by all providers
 */
export interface VectorDocument {
  // Unique identifiers
  id: string // chunk-level unique ID
  doc_id: string // document (file) level ID
  chunk_id: number // chunk index

  // Content
  content: string // actual text content
  vector?: number[] // embedding vector (optional, generated by provider)

  // Metadata
  metadata: DocumentMetadata
  modelName?: string // embedding model name (optional)
}


/**
 * Search type definitions
 */
export type SearchType = 'semantic' | 'keyword' | 'hybrid'

/**
 * Search options - unified search options for all search types
 */
export interface VectorSearchOptions {
  topK: number // maximum number of results
  searchType: SearchType // search method to use
}

// Alias for compatibility
export type SearchOptions = VectorSearchOptions

/**
 * Index statistics
 */
export interface VectorStoreInfo {
  totalVectors: number // total vector count
  dimensions: number // vector dimensions
  indexSize?: number // index size (bytes)
  embeddingModel?: string // embedding model name
}

// ========================================
// LanceDB Types (formerly in separate files)
// ========================================

// Re-export LanceDB config types for compatibility
export type { LanceDBTableConfig, LanceDBConnectionOptions } from '../lancedb/config.js'

/**
 * RAG-optimized simple document schema for LanceDB
 * GPT recommended approach: vector, text, doc_id, chunk_id, metadata (JSON string)
 */
export interface RAGDocumentRecord extends Record<string, unknown> {
  vector: number[] // embedding vector (from contextual text)
  text: string // original text to pass to LLM (chunk content)
  contextual_text: string // contextual text used for embedding
  doc_id: string // document identifier (file path based)
  chunk_id: number // chunk index
  metadata: string // metadata stored as JSON string
  model_name: string // embedding model name
}

/**
 * LanceDB search result (simplified)
 */
export interface RAGSearchResult {
  vector: number[]
  text: string
  doc_id: string
  chunk_id: number
  metadata: DocumentMetadata
  _distance?: number // distance value provided by LanceDB
  _score?: number // calculated similarity score
  _relevance_score?: number // calculated similarity score
}

/**
 * LanceDB table creation options (consolidated)
 */
export interface LanceDBTableOptions {
  name: string // table name
  embeddingDimensions: number
  mode?: 'create' | 'overwrite' | 'append'
  embeddingFunction?: any // LanceDBEmbeddingFunction
}

// ========================================
// Search Types (consolidated from multiple files)
// ========================================

/**
 * Unified search result - compatible with both vector and traditional search
 */
export interface SearchResult {
  // Document info
  id: string // chunk-level unique ID
  content: string // text content
  
  // Search scores
  score: number // similarity score (0-1, higher is more similar)
  
  // Metadata
  metadata: DocumentMetadata
  chunkIndex: number // chunk index for compatibility
  
  // Search method information
  searchType: SearchType // The search method that was used
}

// Alias for compatibility - VectorSearchResult is same as SearchResult
export type VectorSearchResult = SearchResult

// ========================================
// Reranking Types
// ========================================

// ========================================
// Model Information Types
// ========================================

export type ModelInfo = EmbeddingModelInfo

export interface EmbeddingModelInfo {
  name: string
  service: string
  dimensions: number
  maxTokens: number
}

// ========================================
// Event Types (Re-exported from shared)
// ========================================

export type { FileWatcherEvent } from '@/shared/types/index.js'

// ========================================
// Constants
// ========================================

export const RAG_CONSTANTS = {
  DEFAULT_CHUNK_SIZE: 400,
  DEFAULT_CHUNK_OVERLAP: 100,
  DEFAULT_TOP_K: 5,
  DEFAULT_SIMILARITY_THRESHOLD: 0.75,
} as const
